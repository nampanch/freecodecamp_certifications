/* normalizing box model*/

*{
  box-sizing: border-box;
}

/*Remove the margin from your body element, set the font-family to sans-serif, and give it a background-color of #f5f6f7 as the value.*/
body{
  margin: 0;
  font-family: sans-serif;
  background-color: #f5f6f7;

}

/*Step 10
Align your .header text in the center. Make the text uppercase using the text-transform property with uppercase as the value.
Give it a padding of 32px on all sides. Set the background to #0a0a23 and the text to #fff as the color values.
Add a border-bottom with 4px solid #fdb347 as the value.*/
.header{
  text-align:center;
  text-transform: uppercase;
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  border-bottom: 4px solid #fdb347;
}

/*Step 11
Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.
To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.
Create a .gallery selector and make it a flex container.

Step 12
Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.
Try the different values to see how they affect the layout.
When you are done, set an explicit flex-direction of row on the .gallery element.

Step 13
The flex-wrap property determines how your flex items behave when the flex container is too small.
Setting it to wrap will allow the items to wrap to the next row or column.
nowrap (default) will prevent your items from wrapping and shrink them if needed.
Make it so your flex items wrap to the next row when they run out of space.

Step 14
The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.
Give your .gallery selector a justify-content property with center as the value.

Step 15
The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical.
To vertically center your images, give your .gallery selector an align-items property with center as the value.

Step 16
Give your .gallery selector a padding property set to 20px 10px to create some space around the container.
Then, give it a max-width of 1400px and add a margin of 0 auto to center it.

Step 18
Your images need some space between them.
The gap CSS shorthand property sets the gaps, also knowns as gutters, between rows and columns.
The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout.
 You apply the property to the container element.
Give your .gallery flex container a gap property with 16px as the value

*/
.gallery{
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  padding: 20px 10px;
  max-width: 1400px;
  margin: 0 auto;
  gap: 16px;
}


/* keep images of your gallery of same size
Step 17
Notice how some of your images have become distorted. This is because the images have different aspect ratios.
Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave.
Give your .gallery img selector the object-fit property and set it to cover.
This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit.

Step 19
Smooth out your images a bit by giving the .gallery img selector a border-radius property with 10px set as the value.


*/
.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit: cover;
  border-radius:10px;
}

/*
Step 20
The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image.
If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout.
Right now, it is in the center because you set justify-content: center on the flex container.
*/

.gallery::after {
  content: "";
  width: 350px;
}