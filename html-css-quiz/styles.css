/* Step 66
Clicking on the navigation links should jump the viewport to the relevant section. However,
this jumping can be disorienting for some users.
Select all elements, and set the scroll-behavior to smooth.

Step 67
Certain types of motion-based animations can cause discomfort for some users. In particular, people with vestibular disorders have sensitivity to certain motion triggers.

The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. It can take one of the following values:

reduce
no-preference
@media (feature: value) {
  selector {
    styles
  }
}

*/
@media (prefers-reduced-motion : no-preference){* {
  scroll-behavior: smooth;
}
}


body {
    background: #f5f6f7;
    color: #1b1b32;
    font-family: Helvetica;
    margin: 0;
  }

  /*
  Step 10:Make the header take up the full width of its parent container, set its height to 50px,
and set the background-color to #1b1b32. Then, set the display to use Flexbox.
Step 48:Tidy up the header, by using Flexbox to put space between the children, and vertically center them.
Then, fix the header to the top of the viewport.
 */

 header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content: space-between;
  align-items:center;
  position:fixed;
  top: 0;

}


  /*
  Step 8:A useful property of an SVG (scalable vector graphics) is that it contains a path attribute which allows the
   image to be scaled without affecting the resolution of the resultant image.Currently, the img is assuming its default size,
   which is too large. Correctly, scale the image using it's id as a selector, and setting the width to max(100px, 18vw).

  Step 9:As described in the freeCodeCamp Style Guide(https://design-style-guide.freecodecamp.org/), the logo should retain an aspect ratio of 35 / 4, and have padding
  around the text.First, change the background-color to #0a0a23 so you can see the logo. Then, use the aspect-ratio property
  to set the desired aspect ratio to 35 / 4. Finally, add a padding of 0.4rem all around.


   */
  #logo{
    width: max(100px, 18vw);
    background-color: #0a0a23;
    aspect-ratio: 35/4;
    padding: 0.4rem;

  }

  /*
  Step 11:Change the h1 font color to #f1be32, and set the font size to min(5vw, 1.2em).
  Step 49:When the screen width is small, the h1 does not wrap its text content how it should.
  Align the text for the h1 element in the center.

Then, give the main padding such that the Student Info section header can be fully seen.
  */
  h1 {
    color: #f1be32;
    font-size: min(5vw, 1.2em);
    text-align:center;

  }
   main{
     padding-top: 50px;
   }


/*
Step 51:Set the width of the section elements to 80% of their parent container. Then, use margins to center the section elements
, adding 10px to the bottom margin.Also, ensure the section elements cannot be larger than 600px in width.
*/
section{
  width: 80%;
  margin: 0 auto 10px auto;
  max-width: 600px;
}



  /*
  Step 13:Target unordered list elements within nav elements, and use Flexbox to evenly space the children.
  Step 50:On small screens, the unordered list in the navigation bar overflows the right side of the screen.
  Fix this by using Flexbox to wrap the ul content. Then, set the following CSS properties to correctly align the text:

    align-items: center;
    padding-inline-start: 0;
    margin-block: 0;
    height: 100%;
  */
  nav > ul {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    flex-wrap:wrap;
    padding-inline-start: 0;
    margin-block: 0;
    height: 100%;
  }
    /*
  Step 45
Back to styling the page. Select the list elements within the navigation bar, and give them the following styles:

color: #dfdfe2;
margin: 0 0.2rem;
padding: 0.2rem;
display: block;
  */

  nav > ul > li{
    color: #dfdfe2;
    margin: 0 0.2rem;
    padding: 0.2rem;
    display: block;
  }

  /*
  Step 46:On the topic of visual accessibility, contrast between elements is a key factor. For example, the contrast between
  the text and the background of a heading should be at least 4.5:1.Change the font color of all the anchor elements within
  the list elements to something with a contrast ratio of at least 7:1.
  Step 47:To make the navigation buttons look more like typical buttons, remove the underline from the anchor tags.
Then, create a new selector targeting the navigation list elements so that when the cursor hovers over them, the background
color and text color are switched, and the cursor becomes a pointer.
  */
  nav > ul > li:hover{
    cursor: pointer;
    background-color: #dfdfe2;
    color:#1b1b32;
  }

  li > a {
    color: inherit;
    text-decoration:none;

  }

/*
Step 17:Typeface plays an important role in the accessibility of a page. Some fonts are easier to read than others,
and this is especially true on low-resolution screens.Change the font for both the h1 and h2 elements to Verdana, and
use another web-safe font in the sans-serif family as a fallback.
Also, add a border-bottom of 4px solid #dfdfe2 to h2 elements to make the sections distinct.
*/
h1,h2 {
    font-family: Verdana,sans-serif;

  }

  /*Step 52:
Replace the top margin of the h2 elements with 60px of top padding.  */
h2{
    border-bottom: 4px solid #dfdfe2;
    margin-top: 0px;
  padding-top: 60px;
  }

  /*
  Step 53
Add padding to the top and left of the .info elements, and set the other values to 0.
  */
  .info{
    padding: 10px 0 0 5px;
  }


  /*
  Step 54
Give the .formrow elements top margin, and left and right padding. The other padding values should be 0.

Then, increase the font size for all input elements.

  */
  .formrow {
    margin-top: 30px;
    padding: 0px 15px;
  }

  input {
    font-size: 16px;
  }

/*
Step 57
To align the input boxes with each other, create a new ruleset that targets all
input and label elements within an .info element and set the display property to inline-block.

Also, align the label element's text to the right.
*/
.info label, .info input{
  display: inline-block;
}


/* Step 55
To make the first section look more inline, target only the input elements within .info elements,
 and set their width to 50%, and left-align their text. */
 .info input{
  width:50%;
  text-align:left;
}
/* Step 56
Target all label elements within .info elements, and set their width to 10%, and make it so they do not take up less than 55px. */

.info label{
  width: 10%;
  min-width: 55px;
  text-align:right;
}

/*
Step 58
To neaten the .question-block elements, set the following CSS properties:

text-align: left;
display: block;
width: 100%;
margin-top: 20px;
padding-top: 5px;
*/
.question-block{
  text-align:left;
  display:block;
  width: 100%;
  margin-top: 20px;
  padding-top: 5px;
}



  /*
  Step 25:The .sr-only text is still visible. There is a common pattern to visually hide text for only screen readers to read.
    This pattern is to set the following CSS properties:

    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;

    Use the above to define the sr-only class.
*/
.sr-only{
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0px;
    margin: -1px;
    overflow: hidden;
    clip:rect(0,0,0,0);
    white-space: nowrap;
    border: 0;
  }

/*
step 59: set the css properties for the paragraph element to set them as priority with below properties
margin-top: 5px;
    padding-left: 15px;
    font-size: 20px;
*/

  p{
    margin-top: 5px;
    padding-left: 15px;
    font-size: 20px;
  }

  /*
  Step 34:To prevent unnecessary repetition, target the before pseudo-element of the p element, and give it
  a content property of "Question #".
  */
  p::before{
    content: "Question #";
  }

  /*
  Step 60:It is useful to see the default border around the fieldset elements, during development. However, it
  might not be the style you want.Remove the border and bottom padding on the .question elements.
  */
  .question{
    border:none;
    padding-bottom: 0;
  }

  /*
  Step 61
Remove the default styling for the list items of .answers-list, and remove the unordered list padding.
  */
  .answers-list{
    list-style: none;
    padding: 0;
  }

/*
Step 62
Give the submit button a freeCodeCamp-style design, with the following CSS properties:

display: block;
margin: 40px auto;
width: 40%;
padding: 15px;
font-size: 23px;
background: #d0d0d5;
border: 3px solid #3b3b4f;
*/

  button{
    display: block;
    margin: 40px auto;
    width: 40%;
    padding: 15px;
    font-size: 23px;
    background:#d0d0d5;
    border: 3px solid #3b3b4f;

  }

  /*
  Step 63
Set the footer background color to #2a2a40, and use Flexbox to horizontally center the text.

  */
  footer{
    background:#2a2a40;
    display: flex;
    flex-direction: row;
    justify-content: center;

  }

/*
Step 64
Now, we cannot read the text. Target the footer and the anchor
element within to set the font color to a color of adequate contrast ratio.
*/

  footer,footer a{
    color: #dfdfe2;
  }

  /*
  Step 65
Horizontally center all the text within the address element, and add some padding.
  */

  address {
    text-align: center;
    padding: 0.3em;
  }